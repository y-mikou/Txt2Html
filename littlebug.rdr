///////////////////////////////////////
// 主処理
///////////////////////////////////////

【作業中文字列】という文字列は、「」。
【入力ファイル名】は、プログラムの起動時設定(1)。
【出力ファイル名】は、入力ファイル名のファイル名だけから「」へ拡張子を置き換えたものの末尾から1文字消したもの&「_moe.txt」。
【ファイル内容】は、入力ファイル名から読み込んだもの。
作業ファイルという変換対象を作る。

作業中文字列は、作業ファイルがファイル内容を修飾原子からHTMLタグ変換したもの。
//作業中文字列は、作業ファイルが作業中文字列を修飾分子からHTMLタグ変換したもの。
//作業中文字列は、作業ファイルが作業中文字列を行要素からHTMLタグ変換したもの。
//作業中文字列は、作業ファイルが作業中文字列を形式段落からHTMLタグ変換したもの。
//作業中文字列は、作業ファイルが作業中文字列を意味段落からHTMLタグ変換したもの。
//作業中文字列は、作業ファイルが作業中文字列を大区切りからHTMLタグ変換したもの。

作業中文字列を、出力ファイル名へ「UTF-8」で保存する。
「✨ 」＆出力ファイル名＆「を出力しました(HTML化)。[改行]」を出力する。



//////////////////////////////////////////////////////////
// 種類(オブジェクト)
//////////////////////////////////////////////////////////
// 1層目 ////////////////////////////////////////////////////////
変換対象とは
    自分が[加工前文字]を修飾原子からHTMLタグ変換する手順：文字列
        加工中文字は、加工前文字。
        修飾原子というマークアップを作る。
        原子は、修飾原子を取得したもの。

        正規表現で加工中文字を原子(1)(2)から原子(1)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(2)(2)から原子(2)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(3)(2)から原子(3)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(4)(2)から原子(4)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(5)(2)から原子(5)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(6)(2)から原子(6)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(7)(2)から原子(7)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(8)(2)から原子(8)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(9)(2)から原子(9)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(10)(2)から原子(10)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(11)(2)から原子(11)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(12)(2)から原子(12)(3)へ置換して加工中文字とする。
        正規表現で加工中文字を原子(13)(2)から原子(13)(3)へ置換して加工中文字とする。

        /*
        【カウント】という数字は、1。
        原子を要素へそれぞれ繰り返す。
            正規表現で加工中文字を原子([カウント])(2)から原子([カウント])(3)へ置換して加工中文字とする。
            カウントは、カウント+1。
        終わり。
        */
        加工中文字を返す。
    終わり。

    自分が[加工前文字]を修飾分子からHTMLタグ変換する手順：文字列
        【加工後文字】は、加工前文字&「分子処理後」
        加工後文字を返す。
    終わり。

    自分が[加工前文字]を行要素からHTMLタグ変換する手順：文字列
        【加工後文字】は、加工前文字&「行処理後」
        加工後文字を返す。
    終わり。

    自分が[加工前文字]を形式段落からHTMLタグ変換する手順：文字列
        【加工後文字】は、加工前文字&「形式段落処理後」
        加工後文字を返す。
    終わり。

    自分が[加工前文字]を意味段落からHTMLタグ変換する手順：文字列
        【加工後文字】は、加工前文字&「意味段落処理後」
        加工後文字を返す。
    終わり。

    自分が[加工前文字]を大区切りからHTMLタグ変換する手順：文字列
        【加工後文字】は、加工前文字&「大区切り処理後」
        加工後文字を返す。
    終わり。

終わり

// 2層目 ////////////////////////////////////////////////////////

マークアップとは
    自分を、取得する手順：配列
        変換対象は、｛
            　｛「アンパサンドをコード表記へ」、「「[&＆]」」、「「＆amp」」｝
            、｛「ダブルクォートをコード表記へ」、「「["”]」」、「「＆#39」」｝
            、｛「シングルクォートをコード表記へ」、「「['’]」」、「「＆quot」」｝
            、｛「右大不等号をコード表記へ」、「「[<＜]」」、「「＆lt」」｝
            、｛「左大符号等をコード表記へ」、「「[>＞]」」、「「＆gt」」｝
            、｛「全角空白を一時的に別の文字へ」、「「　」」、「「〼」」｝
            、｛「半角空白を一時的に別の文字へ」、「「 」」、「「〿」」｝
            、｛「コロンをコード表記へ」、「「[:：]」」、「「<span class="ltlbg_colon">：</span>」」｝
            、｛「セミコロンをコード表記へ」、「「[;；]」」、「「<span class="ltlbg_semicolon">；</span>」」｝
            、｛「ダーシ1or2個を倍サイズ1文字タグへ」、「「(―{1,2})」」、「「<span class="ltlbg_dash">\1</span><!--ltlbg_dash-->」」｝
            、｛「踊字を踊り字タグ1・2へ」、「「／＼|〱」」、「「<span class="ltlbg_odori1"></span><span class="ltlbg_odori2"></span>」」｝
            、｛「特定の記号の後ろに空白を挿入」、「「([！？♥♪☆!?]〼*)(\w)」」、「「$1〼$2」」｝
            、｛「半角英数記号の2連続を縦中横へ」、「「([^a-zA-Z0-9])([a-zA-Z0-9]{2})([^a-zA-Z0-9])」」、「「$1<span class="ltlbg_tcyA">$2</span>$3」」｝
            、｛「エロ濁点」、「「(.)゛」」、「「<span class="ltlbg_dakuten">$1</span>」」｝
            、｛「縦中横」、「「^.{2,3}^」」、「「<span class="ltlbg_tcyM">$1</span>」」｝
            、｛「回転」、「「[^.^]」」、「「<span class="ltlbg_rotate">$1</span>」」｝
            、｛「字幅対応」、「「[-.-]」」、「「<span class="ltlbg_wdfix">$1</span>」」｝
            、｛「強制合字」、「「[l[.{2}]r]」」、「「<span class="ltlbg_forceGouji1">$1</span><span class="ltlbg_forceGouji2">$2</span>」」｝
        ｝。
        変換対象を返す
    終わり
終わり
