(use file.util)
(use data.imap)
(use gauche.collection)

(define 整形対象ファイル
    (file->string "sample/test.txt")
)

(define 置換対象一覧
    (alist->imap
        '(  ;;置換対象を全て定義し、可視化。順序は問わない。
            ;;(置換処理名 . (置換from 置換to))でマップにする。
            (半角空白 . (" " "〿"))
            (全角空白 . ("　" "〼"))
            (右大不等号_全角 . ("＜" "＆ｌｔＷ"))
            (右大不号等_半角 . ("<" "＆ｌｔＳ"))
            (左大符号等_全角 . ("＞" "＆ｇｔＷ"))
            (左大符号等_半角 . (">" "＆ｇｔＳ"))
            (ダブルクォート_全角 . ("”" "＆＃３９Ｗ"))
            (ダブルクォート_半角 . ("\"" "＆＃３９Ｓ"))
            (シングルクォート_全角 . ("’" "＆＃３９Ｓ"))
            (シングルクォート_半角 . ("'" "＆ｑｕｏｔＳ"))
            (アンパサンド_全角 . ("＆" "＆ａｍｐＷ"))
            (アンパサンド_半角 . ("&" "＆ａｍｐＳ"))
            (コロン . ("[:：]" "<span class=\"ltlbg_colon\">：</span>"))
            (セミコロン . ("[;；]" "<span class=\"ltlbg_semicolon\">：</span>"))
            (改行_Tag . ("\\\n" "<br class=\"ltlbg_br\">"))
            (空行 . ("^[〿〼]*\\\n" "<br class=\"ltlbg_blankline\">"))
            (半角スラッシュ . ("/" "＆＃０４"))
            (記号後空白 . ("([！？♥♪☆!?]〼*)(\w)" "\\1〼\\2"))
            (ルビ1_一時 . ("{([^｜]+)｜([^}]+)}" "<ruby class=\"ltlbg_ruby_tmp=\"><rb>\\1〼</rb><rt>\\2</rt></ruby>"))
            (ルビ2_一時 . ("｜([^《]+)《([^》]+)》" "<ruby class=\"ltlbg_ruby_tmp=\"><rb>\\1〼</rb><rt>\\2</rt></ruby>"))
            (傍点_一時 . ("《《([^｜]+)》》" "<ruby class=\"ltlbg_emphasis_tmp=\"><rb>\\1〼</rb><rt>・</rt></ruby>"))
            (ダーシ . ("―{1,2}" "<span class=\"ltlbg_wsize\">―</span>"))
            (全角空白復旧 . ("〼" "&emsp;"))
            (半角空白復旧 . ("〿" ""))
            (アンパサンド_全角復旧 . ("＆ａｍｐＷ" "＆"))
            (アンパサンド_半角復旧 . ("＆ａｍｐＳ" "&amp;"))
            (左大不等号_全角復旧 . ("＆ｌｔＷ" "＜"))
            (左大不等号_半角復旧 . ("＆ｌｔＳ" "&lt;"))
            (右大不等号_全角復旧 . ("＆ｇｔＷ" "＞"))
            (右大不等号_半角復旧 . ("＆ｇｔＳ" "&gt;"))
            (ダブルクォート_全角復旧 . ("＆＃３９Ｗ" "”"))
            (ダブルクォート_半角復旧 . ("＆＃３９Ｓ" "&#39;"))
            (シングルクォート_全角復旧 . ("＆ｑｕｏｔＷ" "’"))
            (シングルクォート_半角復旧 . ("＆ｑｕｏｔＳ" "&quot;"))
            (半角スラッシュ復旧 . ("&#04;" "/"))
            (改行復旧 . ("<br class=\"ltlbg_br\">" "<br class=\"ltlbg_br\">\\\n"))
        )
    )
)

;;置換対象一覧の置換内容の、処理順を定義
(define 置換処理順
    (list
        ;前処理
        '半角空白
        '全角空白
        'ダブルクォート_全角
        'ダブルクォート_半角
        'シングルクォート_全角
        'シングルクォート_半角
        '右大不等号_全角
        '右大不号等_半角
        '左大符号等_全角
        '左大符号等_半角
        'アンパサンド_全角
        'アンパサンド_半角
        '半角スラッシュ
        'コロン
        'セミコロン
        '空行
        '改行_Tag

        ;主部
        '記号後空白
        'ルビ1_一時
        'ルビ2_一時
        '傍点_一時
        'ダーシ

        ;後処理
        '全角空白復旧
        '半角空白復旧
        'アンパサンド_全角復旧
        'アンパサンド_半角復旧
        'ダブルクォート_全角復旧
        'ダブルクォート_半角復旧
        'シングルクォート_全角復旧
        'シングルクォート_半角復旧
        '左大不等号_全角復旧
        '左大不等号_半角復旧
        '右大不等号_全角復旧
        '右大不等号_半角復旧
        '半角スラッシュ復旧
        '改行復旧
    )
)

;;高次関数「置換実行」の定義
;;  対象文字列に対して、置換処理名で指定した正規表現置換を行う。
;;  置換処理名は、置換対象一覧マップに定義されている
(define (置換元取得 置換処理名)
    (list-ref (imap-get 置換対象一覧 置換処理名) 0)
)
(define (置換先取得 置換処理名)
    (list-ref (imap-get 置換対象一覧 置換処理名) 1)
)
(define (置換実行 置換処理名 対象文字列)
    (regexp-replace-all (置換元取得 置換処理名) 対象文字列 (置換先取得 置換処理名))
)


;;処理実体
;;  作業中文字列の初期状態を整形対象ファイルの内容とし、
;;  作業中文字列へ束縛しながら、作業中文字列に対して置換実行関数を適用する。
;;  置換処理順リストで定義された順・回数行う。
(let loop ([x 0] [作業中文字列 整形対象ファイル])
  (if (= x (size-of 置換処理順))
    (print 作業中文字列)
    (loop (+ x 1) (set! 作業中文字列 (置換実行 (list-ref 置換処理順 x) 作業中文字列)))
  )
)
